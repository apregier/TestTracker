#!/usr/bin/perl

use strict;
use warnings;

use Carp 'croak';
use List::MoreUtils qw(uniq);
use Pod::Usage;
use TestTracker::Config;
use TestTracker;

my %config = TestTracker::Config::load();

my %options = TestTracker::parse_args(
    'explain' => 'explain|e',
);

my @files = @ARGV;
my @nonfiles = grep { ! -f $_ } @files;
if (@nonfiles) {
    printf STDERR ("ERROR: Nonfiles passed in arguments:\n%s\n", join("\n", @nonfiles));
    exit 1;
}

if (!defined($options{'git'}) && !@files) {
    pod2usage(2);
}

if (defined $options{'git'}) {
    push @files, TestTracker::changed_files_from_git($options{'git'});
    @files = uniq @files;
}

croak "No files provided." unless @files;
my @abs_files = map { File::Spec->rel2abs($_) } @files;
my @git_files = TestTracker::abs2git(@abs_files);
my @tests = TestTracker::tests_for_git_files(@git_files);
push @tests, grep { /$config{test_regex}/ } @git_files;

my %modules_for_tests;
if ($options{'explain'}) {
    %modules_for_tests = TestTracker::modules_for_tests(\@tests, \@git_files);
}

my @test_durations = TestTracker::durations_for_tests(@tests);

my $format = "%5s  %s\n";
my $total_duration = 0;
for my $test_duration (@test_durations) {
    my ($test, $duration) = @{$test_duration};
    $total_duration += $duration;

    printf $format, $duration, $test;
    if ($options{'explain'}) {
        printf " "x12 . "Because of %s\n", join("\n" . " "x23, @{$modules_for_tests{$test}});
    }
}

printf "\nFound %s tests which would take a total of %s seconds (%s) to run.\n",
        scalar(@test_durations), $total_duration, format_duration($total_duration);

sub format_duration {
    my $duration = shift;

    my $hours = int($duration/3600);
    my $remainder = $duration - $hours*3600;

    my $minutes = int($remainder/60);
    my $seconds = $remainder - $minutes*60;

    return sprintf("%02d:%02d:%02d", $hours, $minutes, $seconds);
}

__END__

=head1 NAME

   test-tracker-list - List tests for given module paths or based on Git changes.

=head1 SYNOPSIS

   test-tracker-list [options] [module_path ...]

     Options:
       --git [<since>..<until>]             determine test(s) to run from Git changes
       --help                               brief help message
       --man                                full documentation

=cut
