#!/usr/bin/perl

use strict;
use warnings;

use Data::UUID;
use File::Path qw(make_path);
use File::Spec;
use TestTracker::Config;
use TestTracker;
use Pod::Usage;
use List::Util qw(max sum);
use List::MoreUtils qw(uniq);

my %config = TestTracker::Config::load();

my %o = TestTracker::parse_args(
    pass_through => 1,
    'track' => 'track',
    'lsf'   => 'lsf',
    'lsf-tail'   => 'lsf-tail',
    'lsf-interactive'   => 'lsf-interactive',
    'jobs'  => 'jobs=i',
);

if ($o{'track'} && $o{'lsf'}) {
    die '--track and --lsf are mutually exclusive options.';
}

if ($o{'track'} || $o{'lsf'} || $o{'lsf-tail'}) {
    setup_log_directory();
    unless ($o{jobs}) {
        $o{jobs} = 10;
    }
}

if ($o{jobs}) {
    unshift @ARGV, '--jobs', $o{jobs};
}

if ($o{'lsf-interactive'}) {
    unshift @ARGV, '--exec', 'test-tracker-exec-lsf-interactive';
}

if ($o{'lsf-tail'}) {
    unshift @ARGV, '--exec', 'test-tracker-exec-lsf-tail';
}

if ($o{'lsf'}) {
    unshift @ARGV, '--exec', 'test-tracker-exec-lsf';
}

if ($o{'track'}) {
    unshift @ARGV, '--exec', 'test-tracker-exec-tracker';
}

if ($o{'git'}) {
    my @tests = TestTracker::tests_for_git_changes($o{'git'});
    my $msg_suffix = sprintf("to run based on Git changes (%s)", $o{'git'});
    unless (@tests) {
        printf STDERR "No tests %s.\n", $msg_suffix;
        exit 1;
    }
    my @test_durations = map { $_->[1] } TestTracker::durations_for_tests(TestTracker::rel2git(@tests));
    my $total_duration = sum(@test_durations);
    my $estimated_duration = $total_duration;
    if ($o{jobs}) {
        my $t = $estimated_duration / $o{jobs};
        $estimated_duration = max($t, max(@test_durations));
    }
    printf STDERR "Found %d tests %s which would take an estimated %d seconds (%s) to run.\n",
        scalar(@tests), $msg_suffix, $estimated_duration, TestTracker::format_duration($estimated_duration);
    push @ARGV, @tests;
}


exec 'prove', @ARGV;

sub setup_log_directory {
    my $workspace = $config{lsf_log_dir};
    my $username = getpwuid($>);
    my $uuid_generator = new Data::UUID;
    my $uuid = $uuid_generator->create_str();

    # Since we are doing a make_path
    die "cannot find workspace at $workspace" unless -d $workspace;

    my $log_directory = File::Spec->join($workspace, "test_logs", $username, $uuid);
    make_path($log_directory);
    die "couldn't create $log_directory" unless -d $log_directory;

    $ENV{TESTTRACKER_LOG_DIR} = $log_directory;
}

__END__

=head1 NAME

    test-tracker-prove - Wrapper for `prove` that allows submission to LSF and detection of tests to run based on Git changes.

=head1 SYNOPSIS

    test-tracker-prove [options] [test_path ...]

     Options:
       --lsf                                bsub test(s) to your LSF cluster
       --git [<since>..<until>]             determine test(s) to run from Git changes
       --help                               brief help message
       --man                                full documentation

=cut
